{
	"info": {
		"_postman_id": "d4f4bad4-e02a-4f11-a3e5-b6f0e2a23f25",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25337968"
	},
	"item": [
		{
			"name": "Code 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Проверка статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. парсим response body в json\r",
							"var resp_Data = pm.response.json()  \r",
							"\r",
							"//4. парсим requst url \r",
							"var req_Data = pm.request.url.query.toObject();\r",
							"console.log(req_Data)\r",
							"\r",
							"// 5. сравниваем name respons и nmae request\r",
							"pm.test(\"Comparison name\", function () {   \r",
							"    pm.expect(resp_Data.name).to.eql(req_Data.name);\r",
							"});\r",
							"\r",
							"// 6. сравниваем name respons и nmae request\r",
							"pm.test(\"Comparison age\", function () {   \r",
							"    pm.expect(resp_Data.age).to.eql(req_Data.age);\r",
							"});\r",
							"\r",
							"// 7. сравниваем name respons и nmae request\r",
							"pm.test(\"Comparison salary\", function () {   \r",
							"    pm.expect(resp_Data.salary).to.eql(+req_Data.salary);\r",
							"});\r",
							"\r",
							"// 8. вывести в консоль параметры family из response\r",
							"console.log(resp_Data.family)\r",
							"\r",
							"//9. Проверить что у параметра dog есть параметр name\r",
							"pm.test(\"Dog param name\", function () {\r",
							"    pm.expect(resp_Data.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"\r",
							"//10. Проверить что у параметра dog есть параметр age\r",
							"pm.test(\"Dog param age\", function () {\r",
							"    pm.expect(resp_Data.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить что параметр name имеет значение Luky\r",
							"pm.test(\"Dog name\", function () {\r",
							"       pm.expect(resp_Data.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить что параметр age имеет значение 4\r",
							"pm.test(\"Dog age\", function () {\r",
							"       pm.expect(resp_Data.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Yuriy&age=46&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yuriy"
						},
						{
							"key": "age",
							"value": "46"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Проверка статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить respons body в json\r",
							"var resp_Data = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request url\r",
							"var req_Data = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить что name response равно name request\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(resp_Data.name).to.eql(req_Data.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить что age response равен age request\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(resp_Data.age).to.eql(+req_Data.age);\r",
							"});\r",
							"\r",
							"// //.  Вывести в консоль параметры salary из request\r",
							"// console.log(req_Data.salary)\r",
							"\r",
							"// //8.  Вывести в консоль параметры salary из response\r",
							"// console.log(resp_Data.salary)\r",
							"\r",
							"// //9.  Вывести в консоль 0-й параметр salary из response\r",
							"// console.log(resp_Data.salary[0])\r",
							"\r",
							"// //10.  Вывести в консоль 1-й параметр salary из response\r",
							"// console.log(resp_Data.salary[1])\r",
							"\r",
							"// //11.  Вывести в консоль 2-й параметр salary из response\r",
							"// console.log(resp_Data.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(resp_Data.salary[0]).to.eql(+req_Data.salary);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(+resp_Data.salary[1]).to.eql(+req_Data.salary*2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(+resp_Data.salary[2]).to.eql(+req_Data.salary*3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp_Data.name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp_Data.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp_Data.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							" for ( i =0; i<resp_Data.salary.length; i++){\r",
							"      console.log(resp_Data.salary[i])\r",
							" }\r",
							" \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name=Yuriy&age=46&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Yuriy"
						},
						{
							"key": "age",
							"value": "46"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. проверка 200 статус кода\r",
							"pm.test(\"Status code is 200\", function () {    \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3.  парсим respons body в json\r",
							"var resp_Data = pm.response.json();  \r",
							"\r",
							"//4.  проверка что name в ответе равна name в запросе\r",
							"pm.test(\"Check name\", function () {     \r",
							"     pm.expect(resp_Data.name).to.eql(\"Yuriy\");\r",
							"});\r",
							"\r",
							"//5. проверка что age в отете равно age в запросе\r",
							"pm.test(\"Check age\", function () {   \r",
							"     pm.expect(resp_Data.age).to.eql('46');\r",
							"});\r",
							"\r",
							"//6. проверка что salary в отете равно salary в запросе\r",
							"pm.test(\"Check salary\", function () {   // проверка что salary в отете равно salary в запросе\r",
							"     pm.expect(resp_Data.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"//7. парсим данные из request body\r",
							"var req_Data = request.data;  \r",
							"\r",
							"var name_req = req_Data.name;\r",
							"var age_req = req_Data.age;\r",
							"var salary_req = req_Data.salary;\r",
							"\r",
							"//8. проверка что name в отете равно name из запроса\r",
							"pm.test(\"Comparison name\", function () {   \r",
							"     pm.expect(resp_Data.name).to.eql(name_req);\r",
							"});\r",
							"\r",
							"//9. проверка что age в отете равно age из запроса\r",
							"pm.test(\"Comparison age\", function () {   \r",
							"     pm.expect(resp_Data.age).to.eql(age_req);\r",
							"});\r",
							"\r",
							"//10.  проверка что salary в отете равно salary из запроса\r",
							"pm.test(\"Comparison salary\", function () {   \r",
							"     pm.expect(resp_Data.salary).to.eql(+salary_req);\r",
							"});\r",
							"\r",
							"//11. вывод в консоль параметров family\r",
							"console.log(resp_Data.family)  \r",
							"\r",
							"//12.  проверка что u_salary в отете равно 4*salary из запроса\r",
							"pm.test(\"Comparison u_salary\", function () {   \r",
							"     pm.expect(resp_Data.family.u_salary_1_5_year).to.eql(+(salary_req)*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Yuriy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "46",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6.  Спарсить respons body в json\r",
							"var resp_Data = pm.response.json();  \r",
							"\r",
							"//7. Спарсить request\r",
							"var req_Data = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Property salary\", function () {     \r",
							"     pm.expect(resp_Data).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Property salary_6\", function () {     \r",
							"     pm.expect(resp_Data).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Property salary_12\", function () {     \r",
							"     pm.expect(resp_Data).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Property salary_1.5\", function () {     \r",
							"     pm.expect(resp_Data).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Property salary_3.5\", function () {     \r",
							"     pm.expect(resp_Data).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Property person\", function () {     \r",
							"     pm.expect(resp_Data).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start qa salary\", function () {\r",
							"    pm.expect(resp_Data.start_qa_salary).to.eql(+req_Data.salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa salary 6 months\", function () {\r",
							"    pm.expect(resp_Data.qa_salary_after_6_months).to.eql(+req_Data.salary*2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa salary 6 months\", function () {\r",
							"    pm.expect(resp_Data.qa_salary_after_12_months).to.eql(+req_Data.salary*2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa salary 1.5 year\", function () {\r",
							"    pm.expect(resp_Data[\"qa_salary_after_1.5_year\"]).to.eql(req_Data.salary*3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa salary 3.5 year\", function () {\r",
							"    pm.expect(resp_Data[\"qa_salary_after_3.5_years\"]).to.eql(req_Data.salary*3.8);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name\", function () {\r",
							"    pm.expect(resp_Data.person.u_name[1]).to.eql(+req_Data.salary);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_name\", function () {\r",
							"    pm.expect(resp_Data.person.u_age).to.eql(+req_Data.age);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"qa salary 3.5 year\", function () {\r",
							"    pm.expect(resp_Data[\"qa_salary_after_3.5_years\"]).to.eql(req_Data.salary*3.8);\r",
							"});\r",
							"\r",
							"// 22. Написать цикл, который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (fff in resp_Data.person){\r",
							"    console.log(resp_Data.person[fff])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}